import static groovy.io.FileType.FILES

class LearningObjective {
    String id
    String title
    int chapter
    int chapterIndex


    LearningObjective(String id, String title, String chapter, String chapterIndex) {
      this.id = id
      this.title = title
      this.chapter = Integer.valueOf(chapter)
      this.chapterIndex = Integer.valueOf(chapterIndex)
    }
}

task includeLearningObjectives(
        description: 'collect learning objectives from source files and include them as listing',
        group: 'isaqb-curriculum'
) {
    doFirst {
        buildDir.mkdirs()
    }

    doLast {
        def contentDE = createLearningObjectivesContent("DE", ~/\[\[(LZ-\d*-\d*)\]\]\s*==== (LZ (\d*)-(\d*).*)/, "Verzeichnis der Lernziele")
        def contentEN = createLearningObjectivesContent("EN", ~/\[\[(LG-\d*-\d*)\]\]\s*==== (LG (\d*)-(\d*).*)/, "List of Learning Goals")

        writeLearningObjectives(contentDE, contentEN)
    }

    ext.createLearningObjectivesContent = { language, pattern, headline ->
        def learningObjectives = collectLearningObjectives(pattern)

        sortLearningObjectives(learningObjectives)

        return compileLearningObjectives(language, headline, learningObjectives)
    }

    ext.collectLearningObjectives = { pattern ->
        def docsFolder = new File(projectDir, '/docs')
        def learningObjectives = []
        docsFolder.traverse(type: FILES) { file ->
            if(file.name ==~ '.*[.](ad|adoc|asciidoc)$') {
                def content = file.text
                def matcher = content =~ pattern

                while(matcher) {
                    def id = matcher.group(1)
                    def title = matcher.group(2)
                    def chapter = matcher.group(3)
                    def chapterIndex = matcher.group(4)
                    learningObjectives.add(
                        new LearningObjective(id, title, chapter, chapterIndex))
                }
            }
        }

        return learningObjectives
    }

    ext.sortLearningObjectives =  { learningObjectives ->
        learningObjectives.sort { a, b ->
            if(a.chapter == b.chapter) {
                a.chapterIndex <=> b.chapterIndex
            } else {
                a.chapter <=> b.chapter
            }
        }
    }

    ext.compileLearningObjectives = { language, headline, learningObjectives ->
        def content = ''<<''

        content <<= "// tag::" + language + "[]\n"
        content <<= "== " + headline + "\n\n"

        learningObjectives.each { learningObjective ->
            content <<= "- <<" + learningObjective.id + ", " + learningObjective.title + ">>\n"
        }

        content <<= "// end::" + language + "[]\n"

        return content.toString()
    }

    ext.writeLearningObjectives = { contentDE, contentEN ->
        def docsFolder = new File(projectDir, '/docs')
        def outFile = new File(docsFolder, '/learning-objectives.adoc')

        println "Learning objectives file: " + outFile.getAbsolutePath()

        final String EMPTYRemark = """// tag::REMARK[]\n// end::REMARK[]\n"""

        outFile.withWriter('UTF-8') { writer ->
            writer.writeLine("// this is autogenerated - please do not modify manually!\n")
            writer.writeLine(contentDE)
            writer.writeLine(contentEN)
            writer.writeLine(EMPTYRemark)
        }
    }
}
